(()=>{var e={313:(e,o,s)=>{const t=s(418);s(142).config();const r=t.createPool({host:process.env.DB_HOST,user:process.env.DB_USER,password:process.env.DB_PASSWORD,database:process.env.DB_NAME});e.exports={pool:r,checkConnection:async function(){try{const[e]=await r.query("SELECT 1 + 1 AS solution");console.log("Database Connection Successful! Solution: ",e[0].solution)}catch(e){console.error("Database Connection Error: ",e)}}}},679:(e,o,s)=>{const t=s(860).Router();t.post("/saveMessage",(async(e,o)=>{const{roomId:s,socketId:t,userName:r,content:n}=e.body;try{await pool.query("INSERT INTO chat (roomId, socketId, userName, content) VALUES (?, ?, ?, ?)",[s,t,r,n]),o.status(200).send({success:!0})}catch(e){console.error("Error saving message in DB: ",e),o.status(500).send("Internal Server Error")}})),t.get("/getMessages",(async(e,o)=>{const{roomId:s,joinTime:t}=e.query;try{const[e]=await pool.query("SELECT * FROM chat WHERE roomId = ? AND sendTime > ?",[s,t]);o.status(200).send(e)}catch(e){console.error(e),o.status(500).send("Internal Server Error")}})),e.exports=t},276:(e,o,s)=>{const{pool:t}=s(313);s(142).config();const r=process.env.API_ENDPOINT;e.exports=e=>{e.on("connection",(o=>{console.log("New client connected"),o.on("setUsername",(e=>{o||console.error("Socket is undefined!"),void 0===e&&console.error("userName is undefined!"),o.userName=e,console.log(`Username set to ${e}`)})),o.on("joinRoom",(async(e,s)=>{try{o.join(e),console.log(`User with socket ID ${o.id} joined room: ${e} joinTime: ${s}`);const[r]=await t.query("SELECT * FROM chat WHERE roomId = ? AND sendTime > ?",[e,s]);o.emit("previousMessages",r)}catch(e){console.log("Error loading previous messages: ",e)}})),o.on("sendMessage",(async(o,s,t)=>{console.log("Received message:",o,s,t);try{(await axios.post(`${r}/saveMessage`,{roomId:o,socketId:s,userName:t.userName,content:t.content})).data.success&&(e.to(o).emit("receiveMessage",{...t,socketId:s}),console.log("Message saved and sent to other clients"))}catch(e){console.log("Error saving message: ",e)}})),o.on("disconnect",(()=>{console.log(`User with socket ID ${o.id}`)}))}))}},582:e=>{"use strict";e.exports=require("cors")},142:e=>{"use strict";e.exports=require("dotenv")},860:e=>{"use strict";e.exports=require("express")},418:e=>{"use strict";e.exports=require("mysql2/promise")},952:e=>{"use strict";e.exports=require("socket.io")},685:e=>{"use strict";e.exports=require("http")}},o={};function s(t){var r=o[t];if(void 0!==r)return r.exports;var n=o[t]={exports:{}};return e[t](n,n.exports,s),n.exports}(()=>{const e=s(860),o=s(685),t=s(952),r=s(582),n=(s(679),s(276)),{checkConnection:c}=s(313),a=e();a.use(r({origin:"CLIENT_ORIGIN",methods:["GET","POST"],credentials:!0}));const i=o.createServer(a),u=t(i,{cors:{origin:"http://localhost:3000",methods:["GET","POST"],credentials:!0}});a.use(e.json()),c(),n(u),a.get("/",((e,o)=>{o.send("Server is running")})),a.use(((e,o,s,t)=>{console.error(e.stack),s.status(500).send("Something broke!")}));const l=process.env.PORT||5012;i.listen(l,(()=>{console.log(`Server running on http://localhost:${l}`)}))})()})();
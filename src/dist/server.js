(()=>{var e={976:e=>{e.exports=[]},840:(e,o,s)=>{const t=s(418).createPool({host:"ssap-ide-db.cp6hsnofjfzx.ap-northeast-2.rds.amazonaws.com",user:"master",password:"ssap_rainbow0929",database:"ssap-ide-db"});e.exports={pool:t,checkConnection:async function(){try{const[e]=await t.query("SELECT 1 + 1 AS solution");console.log("Database Connection Successful! Solution: ",e[0].solution)}catch(e){console.error("Database Connection Error: ",e)}}}},890:(e,o,s)=>{const t=s(860).Router(),n=s(976);t.get("/",(async(e,o)=>{console.log("sendMessage",n),o.status(200).send(n)})),e.exports=t},50:(e,o,s)=>{const{pool:t}=s(840);e.exports=e=>{e.on("connection",(o=>{console.log("New client connected"),o.on("setUsername",(e=>{o||console.error("Socket is undefined!"),void 0===e&&console.error("userName is undefined!"),o.userName=e,console.log(`Username set to ${e}`)})),o.on("joinRoom",(async(e,s)=>{try{o.join(e),console.log(`User with socket ID ${o.id} joined room: ${e} joinTime: ${s}`);const[n]=await t.query("SELECT * FROM chat WHERE roomId = ? AND sendTime > ?",[e,s]);o.emit("previousMessages",n)}catch(e){console.log("Error loading previous messages: ",e)}})),o.on("sendMessage",(async(o,s,n)=>{console.log("Received message:",o,s,n);try{await t.query("INSERT INTO chat (roomId, socketId, userName, content) VALUES (?, ?, ?, ?)",[o,s,n.userName,n.content]),e.to(o).emit("receiveMessage",{...n,socketId:s}),console.log("Message saved and sent to other clients")}catch(e){console.log("Error saving message: ",e)}})),o.on("disconnect",(()=>{console.log(`User with socket ID ${o.id}`)}))}))}},582:e=>{"use strict";e.exports=require("cors")},860:e=>{"use strict";e.exports=require("express")},418:e=>{"use strict";e.exports=require("mysql2/promise")},952:e=>{"use strict";e.exports=require("socket.io")},685:e=>{"use strict";e.exports=require("http")}},o={};function s(t){var n=o[t];if(void 0!==n)return n.exports;var r=o[t]={exports:{}};return e[t](r,r.exports,s),r.exports}(()=>{const e=s(860),o=s(685),t=s(952),n=s(582),r=(s(890),s(50)),{checkConnection:c}=s(840),a=e();a.use(n());const i=o.createServer(a),l=t(i,{cors:{origin:"http://localhost:3000",methods:["GET","POST"],credentials:!0}});a.use(e.json()),c(),r(l),a.get("/",((e,o)=>{o.send("Server is running")})),a.use(((e,o,s,t)=>{console.error(e.stack),s.status(500).send("Something broke!")}));const u=process.env.PORT||5012;i.listen(u,(()=>{console.log(`Server running on http://localhost:${u}`)}))})()})();